openapi: 3.0.0

info:
  title: Hotel Booking API
  description: Hotel Booking API that contains endpoints for hotels, rooms and comments
  version: 1.0.0

servers:
  - url: https://api.example.com/api

paths:
  /hotels:
    get:
      summary: Get a list of hotels
      tags:
        - hotel
      operationId: getAllHotels
      responses:
        "200":
          description: A list of hotels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/hotel"
              example:
                - id: 1
                  name: "Seaside beach new"
                  description: "Great seaside hotel"
                  address: "Palangos g. 50"
                  hasPool: true
                  isClosed: false
                  imageUrl: "localhost:8080/uploads/image.jpg"
                - id: 2
                  name: "New York old"
                  description: "Historical hotel"
                  address: "New York 50 St."
                  hasPool: false
                  isClosed: false
                  imageUrl: "localhost:8080/uploads/image2.jpg"
    post:
      description: "Create a hotel"
      tags:
        - hotel
      operationId: createHotel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createHotel"
            example:
              - name: "Seaside beach new"
                description: "Great seaside hotel"
                address: "Palangos g. 50"
                hasPool: true
                isClosed: false
                imageUrl: "localhost:8080/uploads/image2.jpg"
      responses:
        "401":
          description: Unauthorized
        "201":
          $ref: "#/components/responses/singleHotel"
        "400":
          $ref: "#/components/responses/badRequest"
        "422":
          $ref: "#/components/responses/unprocessableEntity"

  /hotels/{hotelId}:
    parameters:
      - $ref: "#/components/parameters/hotelId"
    get:
      summary: Get a hotel
      tags:
        - hotel
      operationId: getHotel
      responses:
        "200":
          $ref: "#/components/responses/singleHotel"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update a hotel
      tags:
        - hotel
      operationId: updateHotel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateHotel"
            example:
              - name: "Beach house"
                description: "Best seaside hotel in the world"
                address: "Palangos g. 50"
                hasPool: true
                isClosed: false
                image: File
      responses:
        "401":
          description: Unauthorized
        "200":
          $ref: "#/components/responses/singleHotel"
        "400":
          $ref: "#/components/responses/badRequest"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete a hotel
      tags:
        - hotel
      operationId: deleteHotel
      responses:
        "401":
          description: Unauthorized
        "404":
          $ref: "#/components/responses/notFound"
        "204":
          description: Hotel deleted
  /hotels/{hotelId}/rooms:
    parameters:
      - $ref: "#/components/parameters/hotelId"
    get:
      summary: Get rooms for a specific hotel
      tags:
        - room
      operationId: getRooms
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "200":
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/room"
              example:
                - id: 1
                  number: 10
                  bedAmount: 2
                  description: "Great seaside room 1"
                - id: 2
                  number: 11
                  bedAmount: 4
                  description: "Great seaside room 2"
    post:
      description: "Add a room"
      tags:
        - room
      operationId: createRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createRoom"
      responses:
        "401":
          description: Unauthorized
        "422":
          $ref: "#/components/responses/unprocessableEntity"
        "404":
          $ref: "#/components/responses/notFound"
        "201":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/room"
              example:
                - id: 1
                  number: 10
                  bedAmount: 2
                  description: "Great seaside room 1"
  /hotels/{hotelId}/rooms/{roomId}:
    parameters:
      - $ref: "#/components/parameters/hotelId"
      - $ref: "#/components/parameters/roomId"
    get:
      summary: Get a specific room for a specific hotel
      tags:
        - hotel
      operationId: getRoom
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "200":
          description: A single room
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/room"
              example:
                - id: 1
                  number: 10
                  bedAmount: 2
                  description: "Great seaside room 1"
    put:
      summary: Update a room for a specific hotel
      tags:
        - room
      operationId: updateRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateRoom"
      responses:
        "401":
          description: Unauthorized
        "404":
          $ref: "#/components/responses/notFound"
        "200":
          description: Updated room
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/room"
              example:
                - id: 1
                  number: 10
                  bedAmount: 2
                  description: "Great seaside room 1"

    delete:
      summary: Delete a room for a specific hotel
      tags:
        - room
      operationId: deleteRoom
      responses:
        "401":
          description: Unauthorized
        "404":
          $ref: "#/components/responses/notFound"
        "204":
          description: Room deleted
  /hotels/{hotelId}/rooms/{roomId}/comments:
    parameters:
      - $ref: "#/components/parameters/hotelId"
      - $ref: "#/components/parameters/roomId"
    get:
      summary: Get comments for a specific room
      tags:
        - comment
      operationId: getComments
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"
              example:
                - id: 1
                  text: "Good comment"
                  createdAt: "2020/11/18"
                  userName: "admin"
                - id: 2
                  text: "Bad comment"
                  createdAt: "2020/11/18"
                  userName: "dovydas"
    post:
      summary: Add a comment for a specific room
      tags:
        - comment
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createComment"
      responses:
        "401":
          description: Unauthorized
        "404":
          $ref: "#/components/responses/notFound"
        "201":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/comment"
              example:
                - id: 1
                  text: "Good comment"
                  createdAt: "2020/11/18"
                  userName: "admin"
  /hotels/{hotelId}/rooms/{roomId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/hotelId"
      - $ref: "#/components/parameters/roomId"
      - $ref: "#/components/parameters/commentId"
    get:
      summary: Get a specific comment for a specific room
      tags:
        - comment
      operationId: getComment
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "200":
          description: A single comment
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/comment"
              example:
                - id: 1
                  text: "Good comment"
                  createdAt: "2020/11/18"
                  userName: "admin"
    put:
      summary: Update a comment for a specific room
      tags:
        - comment
      operationId: updateComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateComment"
      responses:
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: "#/components/responses/notFound"
        "200":
          description: Updated comment
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/comment"
              example:
                - id: 1
                  text: "Good comment"
                  createdAt: "2020/11/18"
                  userName: "admin"
    delete:
      summary: Delete a comment for a specific room
      tags:
        - comment
      operationId: deleteComment
      responses:
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: "#/components/responses/notFound"
        "204":
          description: Comment deleted
components:
  schemas:
    hotel:
      type: object
      properties:
        id:
          type: integer
        name:
          minLength: 2
          maxLength: 100
          type: string
        description:
          minLength: 5
          maxLength: 500
          type: string
        address:
          minLength: 5
          maxLength: 500
          type: string
        hasPool:
          type: boolean
        isClosed:
          type: boolean
        imageUrl:
          type: string
    createHotel:
      type: object
      required:
        - name
        - description
        - address
        - hasPool
        - isClosed
        - image
      properties:
        name:
          minLength: 2
          maxLength: 100
          type: string
        description:
          minLength: 5
          maxLength: 500
          type: string
        address:
          minLength: 5
          maxLength: 500
          type: string
        hasPool:
          type: boolean
        isClosed:
          type: boolean
        image:
          type: object
    updateHotel:
      type: object
      properties:
        name:
          minLength: 2
          maxLength: 100
          type: string
        description:
          minLength: 5
          maxLength: 500
          type: string
        address:
          minLength: 5
          maxLength: 500
          type: string
        hasPool:
          type: boolean
        isClosed:
          type: boolean
        image:
          type: object
    room:
      type: object
      properties:
        id:
          type: integer
        number:
          type: integer
        bedAmount:
          type: integer
        description:
          minLength: 5
          maxLength: 500
          type: string
    createRoom:
      type: object
      required:
        - number
        - bedAmount
        - description
      properties:
        number:
          type: integer
        bedAmount:
          type: integer
        description:
          minLength: 5
          maxLength: 500
          type: string
    updateRoom:
      type: object
      properties:
        number:
          type: integer
        bedAmount:
          type: integer
        description:
          type: string
    comment:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        userName:
          type: string
    createComment:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          minLength: 2
          maxLength: 100
    updateComment:
      type: object
      properties:
        text:
          type: string
          minLength: 2
          maxLength: 100
    problemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        status:
          type: integer
          format: int32
          description: The HTTP status code applicable to this problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
        errors:
          type: object
          description: A map of detailed errors for every property ([property => error])
  responses:
    singleHotel:
      description: A hotel
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: "#/components/schemas/hotel"
          example:
            - id: 1
              name: "Seaside beach new"
              description: "Discussion about best practices when using OpenAPI"
              address: "Palangos g. 50"
              hasPool: false
              isClosed: false
    unprocessableEntity:
      description: Unprocessable entity response
      content:
        application/problem+json:
          schema:
            type: object
            items:
              $ref: "#/components/schemas/problemDetails"
          example:
            type: "https://tools.ietf.org/html/rfc4918#section-11.2"
            title: "Unprocessable Entity"
            status: 422
            errors:
              Name:
                - "'Description' must not be empty."
    badRequest:
      description: Bad request response
    notFound:
      description: Resource was not found
  parameters:
    hotelId:
      name: hotelId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the hotel
    roomId:
      name: roomId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the room
    commentId:
      name: commentId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the comment

tags:
  - name: hotel
    description: Operations related to hotels
  - name: room
    description: Operations related to rooms
  - name: comment
    description: Operations related to comments
